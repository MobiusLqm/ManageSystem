// 表格高級功能
// 1. 多选功能
// 2. 组合排序功能

$(document).ready(function () {
    /* 批量操作 */
    batchoperate_table_initial();

    /* 表格多选 */
    selectable_table_initial();

    /* 表格排序 */
    orderable_table_initial();

    /* 禁止事件冒泡 */
    $(".nobubble").click(function(e){ e.stopPropagation();});
});

/**
 * 添加表格按钮组
 * @param tableDom
 */
function add_function_btn_group(tableDom) {
    var btnGroupDom = tableDom.prev();
    if(!btnGroupDom.hasClass('table-functions')) {
        var classes = 'table-functions';
        btnGroupDom = $("<div>").addClass(classes).insertBefore(tableDom);
    }
    return btnGroupDom;
}


/**
 * 批量操作初始化
 */
function batchoperate_table_initial() {
    var batchTable = $("[batchoperate]");

    // 操作按钮
    var operations = batchTable.attr('batchoperate') || "";
    operations = operations.split(",");

    for(var idx in operations) {
        var operation = operations[idx];
        var url = batchTable.attr(operation+'-url');
        if(!operation || !url) continue;

        _bind_operate(batchTable, operation);
        batchTable.addClass("selectable");
    }
}

/**
 * 获取勾选的行
 * @param batchTable
 * @returns {Array}
 */
function get_checked_vals(batchTable) {
    // 已经勾选的值
    var checkboxs = [];
    var checkName = batchTable.attr("selectable-checkboxname") || "checkboxs"
    batchTable.find("[name="+checkName+"]:checked").each(function () {
        checkboxs.push($(this).val());
    });
    return checkboxs;
}

/**
 * 绑定操作动作
 */
function _bind_operate(batchTable, operation) {
    var url = batchTable.attr(operation+'-url'),
        title = batchTable.attr(operation+'-title') || '批量操作',
        iconCls = batchTable.attr(operation+'-iconCls') || "fa-tag",
        isProgress = batchTable.attr(operation+'-isProgress') != undefined;
    var checkName = $(batchTable).attr("selectable-checkboxname") || "checkboxs";
    var confirmEle = batchTable.attr(operation+'-confirmEle');

    // 按钮组
    var btnGroup = add_function_btn_group(batchTable);
    var btn = btnGroup.find('.table-batchoperate-'+operation);
    if(btn.length==0) {
        var text = batchTable.attr(operation+'-text') || '';
        btn = $('<a class="btn btn-mini btn-yellow"><i class="fa"></i> ' +text+ '</a>');
        btn.attr("title", title).addClass('table-batchoperate-'+operation);

        if (isProgress) {
            btn.attr('ch-color', '#FFC125');
            btn.addClass("caret-hint");
        }
        btn.find(".fa").addClass(iconCls);
        btnGroup.append(btn);
    }

    // url设置 with_args 参数
    var search = $.query.load(window.location.search),
        params = $.query.load(url);
    for(var key in params.keys)
        search = search.set(key, params.get(key));

    // 由于自动转换 param[0]=01&param[1]=02
    search_str = search.toString().replace(/%5B(\d+)%5D/g, '%5B%5D').replace(/%2B/, '');
    url = url.split("?")[0] + search_str;

    if(isProgress) { // 带进度
        btn.attr('confirm-info', confirmEle);
        btn.on('extra-data', function(){
            var checkVals = get_checked_vals(batchTable);
            btn.data('extra-data', {checkboxs: checkVals});
        });
        btn.data_process({process_url: url});
    } else { // 直接跳转
        btn.click(function () {
            var checkVals = get_checked_vals(batchTable);
            var dialog_title = "批量操作 <i class='red'>[若未勾选记录，针对当前全部记录]</i>";
            if (checkVals.length)
                dialog_title = "批量操作 <i class='red'>[共" + checkVals.length + "条记录]</i>";

            show_common_dialog(confirmEle || title+" 操作不可恢复，是否确认？", function (ctx, data) {
                data[checkName] = checkVals;
                post_to(url, data);
            }, dialog_title);

            // 执行初始化函数
            var init_func = $(confirmEle).attr("init-function");
            if(init_func) eval(init_func);
        });
    }
}

/**
 * 可选表格初始化
 */
function selectable_table_initial() {
    // checkbox组件
    var checkboxDom = $("<th width='30'>" +
        "<div class='checkbox no-margin' >" +
            "<label style='padding-left:12px'>" +
                "<input type='checkbox' class='ace' id='checkbox_all'>" +
                "<span class='lbl'></span>" +
            "</label>" +
        "</div></th>");
    var selectableTable = $("table.selectable");

    // 数据行单选checkbox
    var checkboxName = selectableTable.attr("selectable-checkboxname") || "checkboxs";
    selectableTable.find("tr:not(:first)").each(function() {
        // 初始化勾选
        var pk = $(this).attr("data-pk") || "";
        var checked = $(this).attr("init-check") || 'false';
        var curCheckBoxDom = checkboxDom.clone();

        curCheckBoxDom.find("input").attr("name", checkboxName);
        curCheckBoxDom.find("input").attr("id", "checkbox_"+pk).val(pk);
        curCheckBoxDom.find("input").get(0).checked = ['True', '1', 'true'].indexOf(checked) >= 0;

        // 设置data属性
        for(var key in $(this).data()) {
            curCheckBoxDom.attr(key, $(this).data(key));
        }

        // 判断是否和第一行相同个td，防止colspan，非完整行不添加checkbox
        var firstTr = selectableTable.find("tr:first");
        var isFullTd = firstTr.find("th").length == $(this).find("td").length;

        if(isFullTd && $(this).find("input[id^='checkbox']").length == 0) {
            curCheckBoxDom.prependTo($(this));
        }
    });

    // 表头全选checkbox
    selectableTable.find("tr:first").each(function() {
        if($(this).find("#checkbox_all").length == 0) {
            checkboxDom.prependTo($(this));
        }
    });

    /* 多选事件初始化 */
    $("#checkbox_all").click(function(){
        $("input[id^='checkbox']").each(function(){
            this.checked = $("#checkbox_all")[0].checked;
        });
    });

    selectableTable.find("tr").click(function(){
        $(this).find("input[id^='checkbox']").click();
    });
    selectableTable.find("div.checkbox").addClass('nobubble');
    selectableTable.find("input[id^='checkbox']").addClass('nobubble');
}


/**
 * 可排序表格初始化
 */
function orderable_table_initial() {
    var btnGroup = $("<div>");  // 默认不显示排序按钮组
    var orderableTable = $("table.orderable");

    if(!orderableTable.hasClass('no-orderbtn'))  // 是否显示按钮组
        btnGroup = add_function_btn_group(orderableTable);

    // 表格排序显示初始化
    orderableTable.find('[order]').each(function(){
        // 表头初始化
        var order = $(this).attr('order');
        $(this).css({'position': 'relative'}).addClass('nobubble');

        // 正序排序操作
        var up_href = "?order="+order;
        var up_dom = $('<a class="with_args">').attr({'href': up_href});
            up_dom = up_dom.html('<i class="fa fa-caret-up" />');
        if(window.orderArr.indexOf(order) >= 0) up_dom = up_dom.addClass('red');

        // 倒序排序操作
        var dn_href = "?order=-"+order;
        var dn_dom = $('<a class="with_args">').attr({'href': dn_href});
            dn_dom = dn_dom.html('<i class="fa fa-caret-down" />');
        if(window.orderArr.indexOf('-'+order) >= 0) dn_dom = dn_dom.addClass('red');

        var out_dom = $('<div class="order-item">').css({
                'top': 0, 'bottom': 0, 'right': '3px', 'margin': 'auto',
                'width': '8px', 'height': '25px',
                'line-height': '10px', 'position': 'absolute'
            }).append(up_dom).append("<br />").append(dn_dom);

        if($(this).find(".order-item").length==0) $(this).append(out_dom);
    });

    // 可排序字段
    var orderDicts = {};
    orderableTable.find('[order]').each(function () {
        var cur = $(this);
        orderDicts[cur.attr('order')] = cur.html();
    });

    var extraOrder = orderableTable.attr("data-extra-order") || '';
    extraOrder.split(';').forEach(function (element) {
        var segs = element.split(":");
        orderDicts[segs[0]] = segs[1];
    });

    // 排序对话框
    var dialog = $('<div>' +
        '<div id="data-content" class="clearfix"></div>' +
        '<div style="margin-top:10px;">' +
            '<select id="data-source" style="min-width: 150px;">' +
                '<option value="">--- 新增排序 ---</option>' +
            '</select>' +
        '</div>' +
    '</div>');

    for(var key in orderDicts) {
        var cur = $("<option></option>");
        if(!key) continue;
        cur.attr('value', key).html(orderDicts[key]);
        dialog.find("#data-source").append(cur);
    }

    // 初始化排序项
    (window.orderArr||[]).forEach(function (value) {
        if(!value) return true;
        var key = value.replace(/-/g, ''); //去掉开头-
        var cur = _get_order_item(orderDicts[key] || key, value);
        dialog.find("#data-content").append(cur)
    });

    // 添加排序项
    dialog.find("#data-source").change(function(){
        var key = $(this).val();
        if(key) {
            var cur = _get_order_item(orderDicts[key], key);
            $("#data-content").append(cur)
        }
    });

    // 排序功能按钮
    var orderFunc = btnGroup.find('.table-order-func');
    if(orderFunc.length==0) {
        orderFunc = $('<a ' +
            'title="排序"' +
            'class="btn btn-mini btn-yellow table-order-func">' +
            '<i class="fa fa-random"></i></a>');
        btnGroup.append(orderFunc);
    }

    orderFunc.click(function () {
        show_common_dialog(dialog, function () {
            var order = '';
            $("#data-content").find('[data-value]').each(function () {
                order += $(this).attr('data-value') + ';';
            });

            var href = window.location.href;
            var search = $.query.set('order', order);
            window.location.href = href.split('?')[0] + search;
        }, "组合排序");
    });
}


/**
 * 初始化排序项
 * @param label 显示标签
 * @param value -xh, xh etc.
 */
function _get_order_item(label, value) {
    var itemDom = $(
        '<div class="order-item" style="position:relative;float:left;' +
                'background-color:#f6f6f6;' +
                'border: 1px solid #eee;border-radius:3px;' +
                'text-align:center;padding:3px 10px 3px 0;margin-right:10px; min-width:80px;">'+
            '<i class="fa fa-trash bigger-110"></i> '+
            '<span class="item-label"></span> '+
            '<div style="position:absolute;' +
                    'top:3px;right:3px;width: 8px;line-height:10px;">'+
                '<i class="fa fa-caret-up"></i>'+
                '<i class="fa fa-caret-down"></i>'+
            '</div>'+
        '</div>');

    // 初始化数据
    var key = value.replace(/-/g, ''); //去掉开头-
    itemDom.find('.item-label').html(label);
    itemDom.attr('data-key', key).attr('data-value', value);

    if(value[0] != '-') itemDom.find('.fa-caret-up').addClass('red');
    else itemDom.find('.fa-caret-down').addClass('red');

    // 初始化事件
    itemDom.find('.fa-trash ').click(function(){
        $(this).parents(".order-item").remove();
    });

    itemDom.find('.fa-caret-up').click(function () {
        var item = $(this).parents(".order-item");
        item.attr('data-value', key).find('.fa').removeClass('red');
        $(this).addClass('red');
    });

    itemDom.find('.fa-caret-down').click(function(){
        var item = $(this).parents(".order-item");
        item.attr('data-value', '-'+key).find('.fa').removeClass('red');
        $(this).addClass('red');
    });
    return itemDom
}